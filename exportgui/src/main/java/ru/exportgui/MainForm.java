package ru.exportgui;

import ru.exportgui.config.Config;
import ru.exportgui.config.ConfigLoader;
import ru.exportgui.config.Connection;

import javax.swing.*;
import javax.swing.text.DefaultCaret;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

import static javax.swing.text.DefaultCaret.ALWAYS_UPDATE;

public class MainForm extends JFrame {
    private JTextField exportSqlFileField;
    private JPanel rootPanel;
    private JComboBox<String> settingsConnectionsComboBox;
    private JTextField connectionNameField;
    private JTextField connectionUrlField;
    private JButton addConfigButton;
    private JTextField connectionLoginField;
    private JTextField connectionPasswordField;
    private JButton saveSettingsButton;
    private JTextField resultsDirField;
    private JComboBox<String> launchConnectionsComboBox;
    private JTextArea logTextArea;
    private JButton launchButton;
    private JButton removeConnectionButton;
    private JButton clearLogButton;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridBagLayout());
        rootPanel.setPreferredSize(new Dimension(400, 430));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(2, 5, 2, 5);
        rootPanel.add(panel1, gbc);
        settingsConnectionsComboBox = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(settingsConnectionsComboBox, gbc);
        connectionNameField = new JTextField();
        connectionNameField.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(connectionNameField, gbc);
        connectionUrlField = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(connectionUrlField, gbc);
        addConfigButton = new JButton();
        addConfigButton.setText("Добавить");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(addConfigButton, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Название:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(label1, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Подключение:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(label2, gbc);
        connectionLoginField = new JTextField();
        connectionLoginField.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(connectionLoginField, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Пользователь:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(label3, gbc);
        connectionPasswordField = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(connectionPasswordField, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Пароль:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(label4, gbc);
        final JLabel label5 = new JLabel();
        label5.setText("Путь к SQL:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(label5, gbc);
        exportSqlFileField = new JTextField();
        exportSqlFileField.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(exportSqlFileField, gbc);
        final JLabel label6 = new JLabel();
        label6.setText("Результаты:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(label6, gbc);
        resultsDirField = new JTextField();
        resultsDirField.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(resultsDirField, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.gridwidth = 4;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        saveSettingsButton = new JButton();
        saveSettingsButton.setText("Сохранить настройки");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        panel2.add(saveSettingsButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer1, gbc);
        removeConnectionButton = new JButton();
        removeConnectionButton.setText("Удалить");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(removeConnectionButton, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(5, 0, 0, 0);
        rootPanel.add(panel3, gbc);
        launchConnectionsComboBox = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(launchConnectionsComboBox, gbc);
        launchButton = new JButton();
        launchButton.setText("Запуск");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(launchButton, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setEnabled(true);
        scrollPane1.setFocusable(false);
        scrollPane1.setHorizontalScrollBarPolicy(31);
        scrollPane1.setVerticalScrollBarPolicy(22);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(scrollPane1, gbc);
        logTextArea = new JTextArea();
        logTextArea.setEditable(false);
        logTextArea.setLineWrap(true);
        logTextArea.setText("");
        scrollPane1.setViewportView(logTextArea);
        clearLogButton = new JButton();
        clearLogButton.setText("Очистить");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(clearLogButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private class SaveWorker extends SwingWorker<Void, Void> {
        private ConfigLoader configLoader;
        private Config config;

        SaveWorker(ConfigLoader configLoader, Config config) {
            this.configLoader = configLoader;
            this.config = config;
        }

        @Override
        protected synchronized Void doInBackground() {
            config.setExportSQLFile(exportSqlFileField.getText());
            config.setResultsDir(resultsDirField.getText());
            configLoader.save(config);
            return null;
        }

        @Override
        protected void done() {
            writeLogLine("Настройки сохранены");
        }
    }

    private class ExecuteWorker extends SwingWorker<String, Void> {
        private Connection connection;
        private String inputFileName;
        private String outputDir;

        ExecuteWorker(Connection connection, String inputFileName, String outputDir) {
            this.connection = connection;
            this.inputFileName = inputFileName;
            this.outputDir = outputDir;
        }

        @Override
        protected synchronized String doInBackground() {
            QueryExecutor executor = new QueryExecutor(connection, inputFileName, outputDir);
            return executor.getResultFileName();
        }

        @Override
        protected void done() {
            try {
                String result = get();
                writeLogLine("Результат — " + result);
            } catch (Exception ex) {
                writeLogLine(ex.getMessage());
            }
        }
    }

    private Config config;

    private DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");

    private boolean changingStateProgrammatically;

    private void writeLogLine(String text) {
        logTextArea.append(ZonedDateTime.now().format(formatter) + " " + text + "\n");
    }

    private void updateCurrentConnectionFields() {
        int index = settingsConnectionsComboBox.getSelectedIndex();
        if (index != -1) {
            Connection connection = config.getConnections().get(index);
            connectionNameField.setText(connection.getName());
            connectionUrlField.setText(connection.getUrl());
            connectionLoginField.setText(connection.getLogin());
            connectionPasswordField.setText(connection.getPassword());
        } else {
            connectionNameField.setText("");
            connectionUrlField.setText("");
            connectionLoginField.setText("");
            connectionPasswordField.setText("");
        }
    }

    private void updateConnectionNames() {
        int oldSettingsIndex = settingsConnectionsComboBox.getSelectedIndex();
        ComboBoxModel<String> settingsModel = new DefaultComboBoxModel<>(config.getConnectionNames());
        settingsConnectionsComboBox.setModel(settingsModel);
        settingsConnectionsComboBox.setSelectedIndex(Math.min(oldSettingsIndex, config.getConnections().size() - 1));

        int oldLaunchIndex = launchConnectionsComboBox.getSelectedIndex();
        ComboBoxModel<String> launchModel = new DefaultComboBoxModel<>(config.getConnectionNames());
        launchConnectionsComboBox.setModel(launchModel);
        launchConnectionsComboBox.setSelectedIndex(Math.min(oldLaunchIndex, config.getConnections().size() - 1));
    }

    private void updateCurrentConnectionConfig(int index) {
        if (index != -1) {
            Connection connection = config.getConnections().get(index);
            if (!connection.getName().equals(connectionNameField.getText())) {
                connection.setName(connectionNameField.getText());
                updateConnectionNames();
            }
            connection.setUrl(connectionUrlField.getText());
            connection.setLogin(connectionLoginField.getText());
            connection.setPassword(connectionPasswordField.getText());
        }
    }

    MainForm(ConfigLoader configLoader) {
        DefaultCaret caret = (DefaultCaret) logTextArea.getCaret();
        caret.setUpdatePolicy(ALWAYS_UPDATE);

        config = configLoader.load();
        exportSqlFileField.setText(config.getExportSQLFile());
        resultsDirField.setText(config.getResultsDir());

        saveSettingsButton.addActionListener(e -> {
            config.setExportSQLFile(config.getExportSQLFile());
            config.setResultsDir(resultsDirField.getText());
            updateCurrentConnectionConfig(settingsConnectionsComboBox.getSelectedIndex());
            new SaveWorker(configLoader, config).execute();
        });

        if (!config.getConnections().isEmpty()) {
            updateConnectionNames();
            updateCurrentConnectionFields();
            settingsConnectionsComboBox.setSelectedIndex(0);
            launchConnectionsComboBox.setSelectedIndex(0);
            updateCurrentConnectionFields();
        }

        addConfigButton.addActionListener(e -> {
            Connection connection = new Connection();
            config.getConnections().add(connection);
            updateConnectionNames();
            settingsConnectionsComboBox.setSelectedIndex(config.getConnections().size() - 1);
            updateCurrentConnectionFields();
        });

        changingStateProgrammatically = false;
        settingsConnectionsComboBox.addItemListener(new ItemListener() {
            private int selectedIndex = settingsConnectionsComboBox.getSelectedIndex();

            @Override
            public void itemStateChanged(ItemEvent event) {
                if (!changingStateProgrammatically) {
                    if (event.getStateChange() == ItemEvent.SELECTED) {
                        updateCurrentConnectionFields();
                        selectedIndex = settingsConnectionsComboBox.getSelectedIndex();
                    } else if (event.getStateChange() == ItemEvent.DESELECTED) {
                        int index = selectedIndex;
                        updateCurrentConnectionConfig(index);
                    }
                } else {
                    selectedIndex = settingsConnectionsComboBox.getSelectedIndex();
                }
            }
        });

        connectionNameField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                changingStateProgrammatically = true;
                updateCurrentConnectionConfig(settingsConnectionsComboBox.getSelectedIndex());
                changingStateProgrammatically = false;
            }
        });

        launchButton.addActionListener(e -> {
            if (launchConnectionsComboBox.getSelectedIndex() != -1) {
                Connection connection = config.getConnections().get(launchConnectionsComboBox.getSelectedIndex());
                writeLogLine("Запуск экспорта " + connection.getName());
                new ExecuteWorker(
                        config.getConnections().get(launchConnectionsComboBox.getSelectedIndex()),
                        exportSqlFileField.getText(),
                        resultsDirField.getText()
                ).execute();
            }
        });

        removeConnectionButton.addActionListener(e -> {
            if (settingsConnectionsComboBox.getSelectedIndex() != -1) {
                changingStateProgrammatically = true;
                config.getConnections().remove(settingsConnectionsComboBox.getSelectedIndex());
                updateConnectionNames();
                updateCurrentConnectionFields();
                changingStateProgrammatically = false;
            }
        });

        clearLogButton.addActionListener(e -> logTextArea.setText(""));

        setContentPane(rootPanel);
        setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setTitle("Экспорт");
        pack();
    }

}
